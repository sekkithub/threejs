"undefined"==typeof Craft.Freeform&&(Craft.Freeform={}),Craft.Freeform.SubmissionsTableView=Craft.TableElementIndexView.extend({startDate:null,endDate:null,startDatepicker:null,endDatepicker:null,$chartExplorer:null,$totalValue:null,$chartContainer:null,$spinner:null,$error:null,$chart:null,$startDate:null,$endDate:null,afterInit:function(){this.$explorerContainer=$('<div class="chart-explorer-container"></div>').prependTo(this.$container),this.createChartExplorer(),this.base()},getStorage:function(e){return Craft.Freeform.SubmissionsTableView.getStorage(this.elementIndex._namespace,e)},setStorage:function(e,t){Craft.Freeform.SubmissionsTableView.setStorage(this.elementIndex._namespace,e,t)},createChartExplorer:function(){var e=$('<div class="chart-explorer"></div>').appendTo(this.$explorerContainer),t=$('<div class="chart-header"></div>').appendTo(e),a=$('<div class="date-range" />').appendTo(t),r=$('<div class="datewrapper"></div>').appendTo(a),s=($('<span class="to light">to</span>').appendTo(a),$('<div class="datewrapper"></div>').appendTo(a)),i=$('<div class="total"></div>').appendTo(t),n=($('<div class="total-label light">'+Craft.t("Total Submissions")+"</div>").appendTo(i),$('<div class="total-value-wrapper"></div>').appendTo(i));$totalValue=$('<span class="total-value">&nbsp;</span>').appendTo(n),this.$chartExplorer=e,this.$totalValue=$totalValue,this.$chartContainer=$('<div class="chart-container"></div>').appendTo(e),this.$spinner=$('<div class="spinner hidden" />').prependTo(t),this.$error=$('<div class="error"></div>').appendTo(this.$chartContainer),this.$chart=$('<div class="chart"></div>').appendTo(this.$chartContainer),this.$startDate=$('<input type="text" class="text" size="20" autocomplete="off" />').appendTo(r),this.$endDate=$('<input type="text" class="text" size="20" autocomplete="off" />').appendTo(s),this.$startDate.datepicker($.extend({onSelect:$.proxy(this,"handleStartDateChange")},Craft.datepickerOptions)),this.$endDate.datepicker($.extend({onSelect:$.proxy(this,"handleEndDateChange")},Craft.datepickerOptions)),this.startDatepicker=this.$startDate.data("datepicker"),this.endDatepicker=this.$endDate.data("datepicker"),this.addListener(this.$startDate,"keyup","handleStartDateChange"),this.addListener(this.$endDate,"keyup","handleEndDateChange");var o=this.getStorage("startTime")||(new Date).getTime()-2592e6,d=this.getStorage("endTime")||(new Date).getTime();this.setStartDate(new Date(o)),this.setEndDate(new Date(d)),this.loadReport()},handleStartDateChange:function(){this.setStartDate(Craft.Freeform.SubmissionsTableView.getDateFromDatepickerInstance(this.startDatepicker))&&this.loadReport()},handleEndDateChange:function(){this.setEndDate(Craft.Freeform.SubmissionsTableView.getDateFromDatepickerInstance(this.endDatepicker))&&this.loadReport()},setStartDate:function(e){return(!this.startDate||e.getTime()!=this.startDate.getTime())&&(this.startDate=e,this.setStorage("startTime",this.startDate.getTime()),this.$startDate.val(Craft.formatDate(this.startDate)),this.endDate&&this.startDate.getTime()>this.endDate.getTime()&&this.setEndDate(new Date(this.startDate.getTime())),!0)},setEndDate:function(e){return(!this.endDate||e.getTime()!=this.endDate.getTime())&&(this.endDate=e,this.setStorage("endTime",this.endDate.getTime()),this.$endDate.val(Craft.formatDate(this.endDate)),this.startDate&&this.endDate.getTime()<this.startDate.getTime()&&this.setStartDate(new Date(this.endDate.getTime())),!0)},loadReport:function(){var e=this.settings.params;e.startDate=Craft.Freeform.SubmissionsTableView.getDateValue(this.startDate),e.endDate=Craft.Freeform.SubmissionsTableView.getDateValue(this.endDate),this.$spinner.removeClass("hidden"),this.$error.addClass("hidden"),this.$chart.removeClass("error"),Craft.postActionRequest("freeform/api/getSubmissionData",e,$.proxy(function(e,t){if(this.$spinner.addClass("hidden"),"success"==t&&"undefined"==typeof e.error){this.chart||(this.chart=new Craft.charts.Area(this.$chart));var a=new Craft.charts.DataTable(e.dataTable),r={localeDefinition:e.localeDefinition,orientation:e.orientation,formats:e.formats,dataScale:e.scale};this.chart.draw(a,r),this.$totalValue.html(e.totalHtml)}else{var s=Craft.t("An unknown error occurred.");"undefined"!=typeof e&&e&&"undefined"!=typeof e.error&&(s=e.error),this.$error.html(s),this.$error.removeClass("hidden"),this.$chart.addClass("error")}},this))}},{storage:{},getStorage:function(e,t){return Craft.Freeform.SubmissionsTableView.storage[e]&&Craft.Freeform.SubmissionsTableView.storage[e][t]?Craft.Freeform.SubmissionsTableView.storage[e][t]:null},setStorage:function(e,t,a){"undefined"==typeof Craft.Freeform.SubmissionsTableView.storage[e]&&(Craft.Freeform.SubmissionsTableView.storage[e]={}),Craft.Freeform.SubmissionsTableView.storage[e][t]=a},getDateFromDatepickerInstance:function(e){return new Date(e.currentYear,e.currentMonth,e.currentDay)},getDateValue:function(e){return e.getFullYear()+"-"+(e.getMonth()+1)+"-"+e.getDate()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
